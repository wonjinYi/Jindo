[{"/home/wonjinyi/Desktop/Jindo/front/src/components/DoModal.js":"1","/home/wonjinyi/Desktop/Jindo/front/src/index.js":"2","/home/wonjinyi/Desktop/Jindo/front/src/components/BoardSelector.js":"3","/home/wonjinyi/Desktop/Jindo/front/src/components/PrivateBoard.js":"4","/home/wonjinyi/Desktop/Jindo/front/src/components/DoContainer.js":"5","/home/wonjinyi/Desktop/Jindo/front/src/components/Do.js":"6","/home/wonjinyi/Desktop/Jindo/front/src/components/InfoBoard.js":"7","/home/wonjinyi/Desktop/Jindo/front/src/components/EmptyListNoti.js":"8","/home/wonjinyi/Desktop/Jindo/front/src/App.js":"9"},{"size":5332,"mtime":1613394500111,"results":"10","hashOfConfig":"11"},{"size":220,"mtime":1606586968750,"results":"12","hashOfConfig":"11"},{"size":1957,"mtime":1613312242380,"results":"13","hashOfConfig":"11"},{"size":2355,"mtime":1613312375855,"results":"14","hashOfConfig":"11"},{"size":909,"mtime":1609162514351,"results":"15","hashOfConfig":"11"},{"size":1853,"mtime":1607613552026,"results":"16","hashOfConfig":"11"},{"size":725,"mtime":1613400699077,"results":"17","hashOfConfig":"11"},{"size":254,"mtime":1613399100589,"results":"18","hashOfConfig":"11"},{"size":5578,"mtime":1613401320044,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1flbtz2",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/wonjinyi/Desktop/Jindo/front/src/components/DoModal.js",["40"],"import React, { useState, useEffect } from 'react';\nimport styled from \"styled-components\";\n\nimport { makeStyles, TextField, withStyles } from '@material-ui/core';\nimport Modal from '@material-ui/core/Modal';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\n\nconst raro = require(\"raro-number\"); // 53\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    maxWidth: '80%',\n    backgroundColor : 'rgba(255,255,255,0.8)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst giveUpdatedFormData = (setEditmode, updateFormData, id, modalName, modalMemo) => {\n    const nameValidation = ( modalName.length > 0 && modalName.length <= raro ) ? true : false ;\n    const memoVliadation = ( modalMemo.length > 0 && modalMemo.length <= raro*10 ) ? true : false ;\n\n    if(nameValidation && memoVliadation) {\n        updateFormData( modalName, modalMemo, \"edit\", id);\n        setEditmode(false);\n    } \n}\n\nexport default function SimpleModal({modalOpened, handleClose, deleteDo, updateFormData, boardType, id, name, memo, updatedAt}) {\n    const classes = useStyles();\n    \n    const [editmode, setEditmode] = useState(false);\n    const [modalName, setModalName] = useState(name);\n    const [modalMemo, setModalMemo] = useState(memo);\n\n    const parsedUpdatedAt = updatedAt.substring(0,10) + ' ' + updatedAt.substring(11,16);\n    const isDisabled = ((boardType === \"private\") ? true : false);\n\n    const viewBody = (\n        <ModalBody className={classes.paper}>\n            <ContentWrap>\n                <p>{ parsedUpdatedAt }</p>\n                <Name>{ name }</Name>\n                <Memo>{ memo }</Memo>\n            </ContentWrap>  \n             \n            <Menu>\n                <IconButton onClick={ () => { setEditmode(true); } }><EditIcon /></IconButton>\n                <IconButton onClick={deleteDo}><DeleteForeverIcon /></IconButton>\n            </Menu>\n        </ModalBody>\n    );\n\n    const editBody = (\n        <ModalBody className={classes.paper}>\n            <ContentWrap>\n                <BrownBorderTextField \n                    disabled={isDisabled}\n                    value={modalName} onChange={ (e) => { setModalName(e.target.value) } } \n                    id=\"input-name\" label=\"Who\" variant=\"outlined\" margin=\"dense\" fullWidth\n                />\n                <TextValidator>{ ( modalName.length>(raro) ) ? \"↑ 53 Characters or less\" : \"\" }</TextValidator>\n                <BrownBorderTextField value={modalMemo} onChange={ (e) => { setModalMemo(e.target.value) } }\n                    id=\"input-memo\" label=\"What\" variant=\"outlined\" margin=\"dense\" multiline fullWidth\n                />\n                <TextValidator>{ ( modalMemo.length>(raro*10) ) ? \"↑ 530 Characters or less\" : \"\" }</TextValidator>\n            </ContentWrap>  \n            \n            <Menu>\n                <IconButton onClick={ () => { giveUpdatedFormData(setEditmode, updateFormData, id, modalName, modalMemo) } }><CheckCircleOutlineIcon /></IconButton>\n                <IconButton onClick={ () => { setEditmode(false); } }><HighlightOffIcon /></IconButton>\n                <IconButton onClick={ () => { setEditmode(false); deleteDo(); } }>\n                    <DeleteForeverIcon />\n                </IconButton>\n            </Menu>\n        </ModalBody>\n    )\n\n    return (\n        <div className=\"SimpleModal\">\n            <Modal open={modalOpened} onClose={ () => { setEditmode(false); handleClose(); } }>\n            {\n                editmode\n                ? editBody\n                : viewBody\n            }\n            </Modal>\n        </div>\n    );\n}\n\nconst ModalBody = styled.div`\n    display : flex;\n    flex-direction : column;\n    align-items : flex-end;\n    top : 50%;\n    left : 50%;\n    transform : translate(-50%, -50%);\n\n    min-width : 70%;\n    `;\n\nconst ContentWrap = styled.div`\n    width : 100%;\n    max-width : 100%;\n    \n    display : flex;\n    flex-direction : column;\n    justify-contents : center;\n    align-items : center;\n    `;\n\nconst Name = styled.p`\n    padding : 10px;\n    \n    text-align : center;\n\n    background : #FFD57E;\n    border-radius : 5px;\n    color : #4a4a4a;\n    font-weight : bold\n    `;\n\nconst Memo = styled.p`\n    background : #FFFFFF;\n    color : #4a4a4a;\n    padding : 10px;\n    border-radius : 5px;\n    word-break: break-all;\n    overflow-wrap: break-word; \n    `;\n\nconst Menu = styled.div`\n    display : flex;\n    `;\n\n\nconst BrownBorderTextField  = withStyles({\n    root: {\n        \n        margin : '16px 0',\n        '& label' : {\n            color : '#fca652',\n        },\n        '& label.Mui-focused': {\n            color: '#fca652',\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n            borderColor: '#fca652',\n            },\n            '&:hover fieldset': {\n            borderColor: '#fca652',\n            },\n            '&.Mui-focused fieldset': {\n            borderColor: '#fca652',\n            },\n        },\n    },\n})(TextField);\n\nconst TextValidator = styled.p`\n  color : red;\n  margin : 0;\n  padding : 0;\n  `;",["41","42"],"/home/wonjinyi/Desktop/Jindo/front/src/index.js",[],"/home/wonjinyi/Desktop/Jindo/front/src/components/BoardSelector.js",[],"/home/wonjinyi/Desktop/Jindo/front/src/components/PrivateBoard.js",[],"/home/wonjinyi/Desktop/Jindo/front/src/components/DoContainer.js",[],"/home/wonjinyi/Desktop/Jindo/front/src/components/Do.js",[],"/home/wonjinyi/Desktop/Jindo/front/src/components/InfoBoard.js",[],"/home/wonjinyi/Desktop/Jindo/front/src/components/EmptyListNoti.js",[],"/home/wonjinyi/Desktop/Jindo/front/src/App.js",[],{"ruleId":"43","severity":1,"message":"44","line":1,"column":27,"nodeType":"45","messageId":"46","endLine":1,"endColumn":36},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-global-assign","no-unsafe-negation"]